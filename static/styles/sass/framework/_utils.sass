//* 1. Universal Toolbox
//* @mixin ellipsis
//* @mixin _clearfix  // bulletproof one
//* =clearfix  	// used for resposive grid system

//* 2. Placeholder
//* %setBoxSizing  // used for resposive grid system

//* 3. Utility Functions
//* Visibility in breakpoints
//
//* 2. Grid Mixin
//* @mixin blockEqualWidth  		   line: 23   =Equal Width block elements up to 6 in a row
//* @mixin blockEqualWidthWithMargin   line: 35   =Equal Width block elements up to 6 in a row with margin
//* @mixin blockEqualPercent($margin: 1%, $alpha: false, $omega: false, $totalWidth: 100%, $height: 160, $selector: li, $defaultUnit: "%")
//* @mixin multiRowPercent($grid: 2, $margin: 1%, $margin-bottom: $margin, $totalWidth: 100%, $height: 40, $selector: li, $parent: ul, $defaultUnit: "%")
//* @mixin multiRowBlockEqualWidth	   line: 	  =Spread into multiple row, maintain the same width, great for repeatable el
//* @mixin column     		  		   line: 45   =960.gs based Grid System, swtich between 12, 16, 24 cols, add column(s)
//* @mixin push     		  		   line: 45   =960.gs based, add margin-left value, push element to the right
//* @mixin pull     		  		   line: 45   =960.gs based, add margin-right value, push element to the left

//* 1. Universal Toolbox
//
// Applied to single line, trancate the extra content with ...
@mixin ellipsis
	+overflow(hidden)
	text-overflow: ellipsis
	white-space: nowrap
	+width(100%)

// Bulletproof Clearfix
@mixin _clearfix
	zoom: 1
	&:before, &:after
		content: '.'
		+display(block)
		+overflow(hidden)
		+visibility(hidden)
		+fsize(0)
		+lheight(0)
		+box(0,0)
	&:after
		+clear(both)

// We use this to do clear floats
=clearfix
	*zoom: 1
	&:before, &:after
		content: " "
		display: table
	&:after
		clear: both

//* 2. Placeholder

%setBoxSizing
	&
		> *,
		> *:before,
		> *:after
			box-sizing: border-box

//* 3. Utility Functions

//* Visibility in breakpoints
//* strip out of Foundation 5.2.1
=visibility-loop
	@each $current-visibility-breakpoint in $visibility-breakpoint-sizes
		$visibility-inherit-list: ()
		$visibility-none-list: ()
		$visibility-table-list: ()
		$visibility-table-header-group-list: ()
		$visibility-table-row-group-list: ()
		$visibility-table-row-list: ()
		$visibility-table-cell-list: ()
		@each $visibility-comparison-breakpoint in $visibility-breakpoint-sizes
			@if index($visibility-breakpoint-sizes, $visibility-comparison-breakpoint) < index($visibility-breakpoint-sizes, $current-visibility-breakpoint)
				// Smaller than current breakpoint
				$visibility-inherit-list: append($visibility-inherit-list, unquote(".hide-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-none-list: append($visibility-none-list, unquote(".show-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-list: append($visibility-table-list, unquote("table.hide-for-#{$visibility-comparison-breakpoint}-only, table.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-header-group-list: append($visibility-table-header-group-list, unquote("thead.hide-for-#{$visibility-comparison-breakpoint}-only, thead.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-group-list: append($visibility-table-row-group-list, unquote("tbody.hide-for-#{$visibility-comparison-breakpoint}-only, tbody.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-list: append($visibility-table-row-list, unquote("tr.hide-for-#{$visibility-comparison-breakpoint}-only, tr.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-cell-list: append($visibility-table-cell-list, unquote("th.hide-for-#{$visibility-comparison-breakpoint}-only, td.hide-for-#{$visibility-comparison-breakpoint}-only, th.show-for-#{$visibility-comparison-breakpoint}-up, td.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
			@else if index($visibility-breakpoint-sizes, $visibility-comparison-breakpoint) > index($visibility-breakpoint-sizes, $current-visibility-breakpoint)
				// Larger than current breakpoint
				$visibility-inherit-list: append($visibility-inherit-list, unquote(".hide-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-none-list: append($visibility-none-list, unquote(".show-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-list: append($visibility-table-list, unquote("table.hide-for-#{$visibility-comparison-breakpoint}-only, table.hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-header-group-list: append($visibility-table-header-group-list, unquote("thead.hide-for-#{$visibility-comparison-breakpoint}-only, thead.hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-group-list: append($visibility-table-row-group-list, unquote("tbody.hide-for-#{$visibility-comparison-breakpoint}-only, tbody.hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-list: append($visibility-table-row-list, unquote("tr.hide-for-#{$visibility-comparison-breakpoint}-only, tr.hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-cell-list: append($visibility-table-cell-list, unquote("th.hide-for-#{$visibility-comparison-breakpoint}-only, td.hide-for-#{$visibility-comparison-breakpoint}-only, th.hide-for-#{$visibility-comparison-breakpoint}-up, td.hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
			@else
				// Current breakpoint
				$visibility-inherit-list: append($visibility-inherit-list, unquote(".show-for-#{$visibility-comparison-breakpoint}-only, .show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-none-list: append($visibility-none-list, unquote(".hide-for-#{$visibility-comparison-breakpoint}-only, .hide-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-list: append($visibility-table-list, unquote("table.show-for-#{$visibility-comparison-breakpoint}-only, table.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-header-group-list: append($visibility-table-header-group-list, unquote("thead.show-for-#{$visibility-comparison-breakpoint}-only, thead.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-group-list: append($visibility-table-row-group-list, unquote("tbody.show-for-#{$visibility-comparison-breakpoint}-only, tbody.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-row-list: append($visibility-table-row-list, unquote("tr.show-for-#{$visibility-comparison-breakpoint}-only, tr.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
				$visibility-table-cell-list: append($visibility-table-cell-list, unquote("th.show-for-#{$visibility-comparison-breakpoint}-only, td.show-for-#{$visibility-comparison-breakpoint}-only, th.show-for-#{$visibility-comparison-breakpoint}-up, td.show-for-#{$visibility-comparison-breakpoint}-up"), comma)
		// #{$current-visibility-breakpoint} displays
		@media #{nth($visibility-breakpoint-queries, index($visibility-breakpoint-sizes, $current-visibility-breakpoint))}
			#{$visibility-inherit-list}
				display: inherit !important
			#{$visibility-none-list}
				display: none !important
			@if $include-table-visibility-classes != false
				#{$visibility-table-list}
					display: table
				#{$visibility-table-header-group-list}
					display: table-header-group !important
				#{$visibility-table-row-group-list}
					display: table-row-group !important
				#{$visibility-table-row-list}
					display: table-row !important
				#{$visibility-table-cell-list}
					display: table-cell !important

@if $include-html-visibility-classes != false
	+visibility-loop
	// Orientation targeting
	.show-for-landscape,
	.hide-for-portrait
		display: inherit !important
	.hide-for-landscape,
	.show-for-portrait
		display: none !important
	// Specific visibility for tables
	table
		&.hide-for-landscape,
		&.show-for-portrait
			display: table
	thead
		&.hide-for-landscape,
		&.show-for-portrait
			display: table-header-group !important
	tbody
		&.hide-for-landscape,
		&.show-for-portrait
			display: table-row-group !important
	tr
		&.hide-for-landscape,
		&.show-for-portrait
			display: table-row !important
	td,
	th
		&.hide-for-landscape,
		&.show-for-portrait
			display: table-cell !important
	@media #{$landscape}
		.show-for-landscape,
		.hide-for-portrait
			display: inherit !important
		.hide-for-landscape,
		.show-for-portrait
			display: none !important
		// Specific visibility for tables
		table
			&.show-for-landscape,
			&.hide-for-portrait
				display: table
		thead
			&.show-for-landscape,
			&.hide-for-portrait
				display: table-header-group !important
		tbody
			&.show-for-landscape,
			&.hide-for-portrait
				display: table-row-group !important
		tr
			&.show-for-landscape,
			&.hide-for-portrait
				display: table-row !important
		td,
		th
			&.show-for-landscape,
			&.hide-for-portrait
				display: table-cell !important
	@media #{$portrait}
		.show-for-portrait,
		.hide-for-landscape
			display: inherit !important
		.hide-for-portrait,
		.show-for-landscape
			display: none !important
		// Specific visibility for tables
		table
			&.show-for-portrait,
			&.hide-for-landscape
				display: table
		thead
			&.show-for-portrait,
			&.hide-for-landscape
				display: table-header-group !important
		tbody
			&.show-for-portrait,
			&.hide-for-landscape
				display: table-row-group !important
		tr
			&.show-for-portrait,
			&.hide-for-landscape
				display: table-row !important
		td,
		th
			&.show-for-portrait,
			&.hide-for-landscape
				display: table-cell !important
	// Touch-enabled device targeting
	.show-for-touch
		display: none !important
	.hide-for-touch
		display: inherit !important
	.touch .show-for-touch
		display: inherit !important
	.touch .hide-for-touch
		display: none !important
	// Specific visibility for tables
	table.hide-for-touch
		display: table
	.touch table.show-for-touch
		display: table
	thead.hide-for-touch
		display: table-header-group !important
	.touch thead.show-for-touch
		display: table-header-group !important
	tbody.hide-for-touch
		display: table-row-group !important
	.touch tbody.show-for-touch
		display: table-row-group !important
	tr.hide-for-touch
		display: table-row !important
	.touch tr.show-for-touch
		display: table-row !important
	td.hide-for-touch
		display: table-cell !important
	.touch td.show-for-touch
		display: table-cell !important
	th.hide-for-touch
		display: table-cell !important
	.touch th.show-for-touch
		display: table-cell !important

// ====== Advance Grid system:  Selector could be any block element ======
// Styling children CSS3. target the first element, then sibling selector. Make equal width.
@mixin blockEqualWidth($selector: li)
	#{$selector}
		float: left
		margin: 0
		padding: 0
	#{$selector}:first-child:nth-last-child(1)
		width: 100%

	#{$selector}:first-child:nth-last-child(2),
	#{$selector}:first-child:nth-last-child(2) ~ #{$selector}
		width: 50%

	#{$selector}:first-child:nth-last-child(3),
	#{$selector}:first-child:nth-last-child(3) ~ #{$selector}
		width: 33.3333%

	#{$selector}:first-child:nth-last-child(4),
	#{$selector}:first-child:nth-last-child(4) ~ #{$selector}
		width: 25%

	#{$selector}:first-child:nth-last-child(5),
	#{$selector}:first-child:nth-last-child(5) ~ #{$selector}
		width: 20%

	#{$selector}:first-child:nth-last-child(6),
	#{$selector}:first-child:nth-last-child(6) ~ #{$selector}
		width: 16.6666%

	#{$selector}:first-child:nth-last-child(7),
	#{$selector}:first-child:nth-last-child(7) ~ #{$selector}
		width: 14.2857%


// ====== Advance Grid system:  Selector could be any block element ======
// Same as above, but with margin applied; Margin value would be Pixel based with px
// Only support PX
@mixin blockEqualWidthWithMargin($margin: 5px, $alpha: false, $omega: false, $totalWidth: 960, $height: 160, $selector: li, $dividerWidth: 0, $dividerColor: rgb(255,0,0), $defaultUnit: px)
	#{$selector}
		float: left
		position: relative
		padding: 0
		+height($height, $defaultUnit)
		&:after
			content: ""
			+box($dividerWidth, $height * 0.8)
			+bcolor($dividerColor)
			+position(absolute, ($height * 0.2) / 2, -$margin, right)
		&:last-child:after
			display: none

		@if $alpha == false
			&:first-child
				+margin(left, $margin, $defaultUnit)
		@else
			&:first-child
				margin-left: 0 !important

		@if $omega == false
			&:last-child
				+margin(right, $margin, $defaultUnit)
		@else
			&:last-child
				margin-right: 0 !important

	#{$selector}:first-child:nth-last-child(1)
		margin: 0
		@if $alpha != $omega
			+width( $totalWidth - $margin )
			@if $alpha == true
				&:first-child
					+margin(left, $margin, $defaultUnit)
			@if $omega == true
				&:last-child
					+margin(right, $margin, $defaultUnit)
		@else if $alpha == false and $omega == false
			+width( $totalWidth - ( $margin*2) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)
		@else if $alpha == true and $omega == true
			+width( $totalWidth )

	#{$selector}:first-child:nth-last-child(2),
	#{$selector}:first-child:nth-last-child(2) ~ #{$selector}
		@if $alpha != $omega
			+width( ( ($totalWidth - ($margin * 3)) / 2 ) )
		@else if $alpha == false and $omega == false
			+width( ( ($totalWidth - ($margin * 4)) / 2 ) )
		@else if $alpha == true and $omega == true
			+width( ( ($totalWidth - ($margin * 2)) / 2 ) )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)

	#{$selector}:first-child:nth-last-child(3),
	#{$selector}:first-child:nth-last-child(3) ~ #{$selector}
		@if $alpha != $omega
			+width(  ( ($totalWidth - ($margin * 5)) / 3 ) )
		@else if $alpha == false and $omega == false
			+width(  ( ($totalWidth - ($margin * 6)) / 3 ) )
		@else if $alpha == true and $omega == true
			+width(  ( ($totalWidth - ($margin * 4)) / 3 ) )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)

	#{$selector}:first-child:nth-last-child(4),
	#{$selector}:first-child:nth-last-child(4) ~ #{$selector}
		@if $alpha != $omega
			+width( ( ($totalWidth - ($margin * 7)) / 4 ) )
		@else if $alpha == false and $omega == false
			+width( ( ($totalWidth - ($margin * 8)) / 4 ) )
		@else if $alpha == true and $omega == true
			+width( ( ($totalWidth - ($margin * 6)) / 4 ) )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)

	#{$selector}:first-child:nth-last-child(5),
	#{$selector}:first-child:nth-last-child(5) ~ #{$selector}
		@if $alpha != $omega
			+width(  ( ($totalWidth - ($margin * 9)) / 5 )   )
		@else if $alpha == false and $omega == false
			+width(  ( ($totalWidth - ($margin * 10)) / 5 ) )
		@else if $alpha == true and $omega == true
			+width(  ( ($totalWidth - ($margin * 8)) / 5 )   )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)

	#{$selector}:first-child:nth-last-child(6),
	#{$selector}:first-child:nth-last-child(6) ~ #{$selector}
		@if $alpha != $omega
			+width( floor(( ($totalWidth - ($margin * 11)) / 6 )) )
		@else if $alpha == false and $omega == false
			+width( floor(( ($totalWidth - ($margin * 12)) / 6 )) )
		@else if $alpha == true and $omega == true
			+width( floor(( ($totalWidth - ($margin * 10)) / 6 )) )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)

	#{$selector}:first-child:nth-last-child(7),
	#{$selector}:first-child:nth-last-child(7) ~ #{$selector}
		@if $alpha != $omega
			+width( floor(( ($totalWidth - ($margin * 13)) / 7 )) )
		@else if $alpha == false and $omega == false
			+width( floor(( ($totalWidth - ($margin * 14)) / 7 )) )
		@else if $alpha == true and $omega == true
			+width( floor(( ($totalWidth - ($margin * 12)) / 7 )) )
		+margin(left, $margin, $defaultUnit)
		+margin(right, $margin, $defaultUnit)


// ====== Advance Grid system:  Selector could be any block element ======
// Same as above, but with margin applied; Margin value would be Pixel based with px
// Only Support %
@mixin blockEqualPercent($margin: 1%, $alpha: false, $omega: false, $totalWidth: 100%, $height: 160, $selector: li, $defaultUnit: "%")
	$grid-unit: 2 3 4 5 6 7 8 9 10

	#{$selector}
		float: left
		position: relative
		padding: 0
		+height($height, px)

		@if $alpha == false
			&:first-child
				+margin(left, $margin, $defaultUnit)
		@else
			&:first-child
				margin-left: 0 !important

		@if $omega == false
			&:last-child
				+margin(right, $margin, $defaultUnit)
		@else
			&:last-child
				margin-right: 0 !important

	#{$selector}:first-child:nth-last-child(1)
		margin: 0
		@if $alpha != $omega
			+width( $totalWidth - $margin )
			@if $alpha == true
				&:first-child
					+margin(left, $margin, $defaultUnit)
			@if $omega == true
				&:last-child
					+margin(right, $margin, $defaultUnit)
		@else if $alpha == false and $omega == false
			+width( $totalWidth - ( $margin*2) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)
		@else if $alpha == true and $omega == true
			+width( $totalWidth )

	@each $n in $grid-unit
		#{$selector}:first-child:nth-last-child(#{$n}),
		#{$selector}:first-child:nth-last-child(#{$n}) ~ #{$selector}
			@if $alpha != $omega
				+width(  ( ($totalWidth - ($margin * ($n * 2 - 1 ) )) / $n ) )
			@else if $alpha == false and $omega == false
				+width(  ( ($totalWidth - ($margin * ($n * 2 ) )) / $n ) )
			@else if $alpha == true and $omega == true
				+width(  ( ($totalWidth - ($margin * ($n * 2 - 2 ) )) / $n ) )
			+margin(left, $margin, $defaultUnit)
			+margin(right, $margin, $defaultUnit)


//--------------------------------------------------------------------------------------
// Multiple Row Block with equal Percent width grids
// Support $grid-unit number in one Row, suited for repeating blocks of content
// Usage: <div class="block-grid"><ul><li>Three-up element</li> <li>Three-up element</li> <li>Three-up element</li> </ul> </div>
// Note: .block-grid // Need to apply in the div level, because the $parent is ul element
//			+multiRowPercent($grid: Number)
//--------------------------------------------------------------------------------------
@mixin multiRowPercent($grid: 2, $margin: 1%, $margin-bottom: $margin, $totalWidth: 100%, $height: 40, $selector: li, $parent: ul, $defaultUnit: "%")
	$grid-unit: 1 2 3 4 5 6 7 8 9 10

	#{$parent}
		display: block
		overflow: hidden

		#{$selector}
			display: block
			+height($height)
			float: left

		@each $n in $grid-unit
			@if $grid == $n
				#{$selector}
					@if $margin == 0
						width: $totalWidth / $n
					@else
						$width: ( $totalWidth - ( $margin * ( $n - 1 ) ) ) / $n
						width: $width
						+margin(right, $margin, $defaultUnit)
						+margin(bottom, $margin-bottom, $defaultUnit)
						&:nth-child(#{$n}n)
							margin-right: 0


//--------------------------------------------------------------------------------------
// Multiple Row Block with equal width grids
// Support 2, 3, 4, 5, 6 in one Row, suited for repeating blocks of content
// For IE7/8 compatibility block-grid items need to be the same height.
// Usage: <div class="block-grid"><ul><li>Three-up element</li> <li>Three-up element</li> <li>Three-up element</li> </ul> </div>
// Note: .block-grid // Need to apply in the div level, because the $parent is ul element
//			+multiRowBlockEqualWidth(3,60)
//--------------------------------------------------------------------------------------
@mixin multiRowBlockEqualWidth($grid: 2, $height: auto, $gutter: false, $selector: li, $parent: ul)
	#{$parent}
		display: block
		overflow: hidden

		#{$selector}
			display: block
			+height($height)
			float: left

		@if $grid == 2
			@if $gutter == true
				#{$selector}
					width: 50%
			@if $gutter == false
				margin-left: -4%
				#{$selector}
					margin-left: 4%
					width: 46%
					//&:nth-child(2n+1)
						//clear: left
		@if $grid == 3
			@if $gutter == true
				#{$selector}
					width: 33.3333%
			@if $gutter == false
				margin-left: -2%
				#{$selector}
					margin-left: 2%
					width: 31.3%
					//&:nth-child(3n+1)
						//clear: left

		@if $grid == 4
			@if $gutter == true
				#{$selector}
					width: 25%
			@if $gutter == false
				margin-left: -2%
				#{$selector}
					margin-left: 2%
					width: 23%
					//&:nth-child(4n+1)
						//clear: left

		@if $grid == 5
			@if $gutter == true
				#{$selector}
					width: 20%
			@if $gutter == false
				margin-left: -1.5%
				#{$selector}
					margin-left: 1.5%
					width: 18.5%
					//&:nth-child(5n+1)
						//clear: left

		@if $grid == 6
			@if $gutter == true
				#{$selector}
					width: 16.6666%
			@if $gutter == false
				margin-left: -1.6666%
				#{$selector}
					margin-left: 1.6666%
					width: 15%
					//&:nth-child(6n+1)
						//clear: left

