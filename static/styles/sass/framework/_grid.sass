// Based on Foundation v5.2.1
// https://github.com/zurb/foundation
// docs: http://foundation.zurb.com/docs/components/grid.html

//* 1. Grid: Responsive Grid

// Grid Functions: @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc($colNumber, $totalColumns)
	@return percentage($colNumber / $totalColumns)

// @mixins For creating container, nested, and collapsed rows.
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
=grid-row($behavior: false)
	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest
		width: auto
		margin-#{$default-float}: -($column-gutter / 2)
		margin-#{$opposite-direction}: -($column-gutter / 2)
		margin-top: 0
		margin-bottom: 0
		max-width: none
	@else if $behavior == collapse
		width: 100%
		margin: 0
		max-width: $row-width
	@else if $behavior == nest-collapse
		width: auto
		margin: 0
		max-width: none
	@else
		width: 100%
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		margin-top: 0
		margin-bottom: 0
		max-width: $row-width
	// Clearfix for all rows
	+clearfix

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.

=grid-column($columns: false, $last-column: false, $center: false, $offset: false, $push: false, $pull: false, $collapse: false, $float: true, $position: false)
	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull
		position: relative
	// If collapsed, get rid of gutter padding
	@if $collapse
		padding-left: 0
		padding-right: 0
	@else if $collapse == false
		padding-left: $column-gutter / 2
		padding-right: $column-gutter / 2
	// If a column number is given, calculate width
	@if $columns
		width: grid-calc($columns, $total-columns)
		// If last column, float naturally instead of to the right
		@if $last-column
			float: $opposite-direction
	// Source Ordering, adds left/right depending on which you use.
	@if $push
		#{$default-float}: grid-calc($push, $total-columns)
		#{$opposite-direction}: auto
	@if $pull
		#{$opposite-direction}: grid-calc($pull, $total-columns)
		#{$default-float}: auto
	@if $float
		@if $float == left or $float == true
			float: $default-float
		@else if $float == right
			float: $opposite-direction
		@else
			float: none
	// If centered, get rid of float and add appropriate margins
	@if $center
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		float: none
	// If offset, calculate appropriate margins
	@if $offset
		margin-#{$default-float}: grid-calc($offset, $total-columns) !important

// Create presentational classes for grid
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
=grid-html-classes($size)
	@for $i from 0 through $total-columns - 1
		.#{$size}-push-#{$i}
			+grid-column($push: $i, $collapse: null, $float: false)
		.#{$size}-pull-#{$i}
			+grid-column($pull: $i, $collapse: null, $float: false)
	.column,
	.columns
		+grid-column($columns: false, $position: true)
	@for $i from 1 through $total-columns
		.#{$size}-#{$i}
			+grid-column($columns: $i, $collapse: null, $float: false)
	[class*="column"] + [class*="column"]:last-child
		float: $opposite-direction
	[class*="column"] + [class*="column"].end
		float: $default-float
	@for $i from 0 through $total-columns - 1
		.#{$size}-offset-#{$i}
			+grid-column($offset: $i, $collapse: null, $float: false)
	.#{$size}-reset-order,
	.#{$size}-reset-order
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		left: auto
		right: auto
		float: $default-float
	.column.#{$size}-centered,
	.columns.#{$size}-centered
		+grid-column($center: true, $collapse: null, $float: false)
	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		float: $default-float !important
	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite
		float: $opposite-direction

@if $include-html-grid-classes
	.row
		+grid-row
		@extend %setBoxSizing
		&.collapse
			> .column,
			> .columns
				+grid-column($collapse: true, $float: false)
			.row
				margin-left: 0
				margin-right: 0
		.row
			+grid-row($behavior: nest)
			&.collapse
				+grid-row($behavior: nest-collapse)

	.column, .columns
		+grid-column($columns: $total-columns)

	@media #{$small-up}
		+grid-html-classes($size: small)
	@media #{$medium-up}
		+grid-html-classes($size: medium)
		// Old push and pull classes
		@for $i from 0 through $total-columns - 1
			.push-#{$i}
				+grid-column($push: $i, $collapse: null, $float: false)
			.pull-#{$i}
				+grid-column($pull: $i, $collapse: null, $float: false)
	@media #{$large-up}
		+grid-html-classes($size: large)
		@for $i from 0 through $total-columns - 1
			.push-#{$i}
				+grid-column($push: $i, $collapse: null, $float: false)
			.pull-#{$i}
				+grid-column($pull: $i, $collapse: null, $float: false)
	@if $include-xl-html-block-grid-classes
		@media #{$xlarge-up}
			+grid-html-classes($size: xlarge)
		@media #{$xxlarge-up}
			+grid-html-classes($size: xxlarge)

//* 2. Grid: Block Grid

@if $align-block-grid-to-grid
	$block-grid-default-spacing: $column-gutter

// Create a custom block grid
//
// $per-row - # of items to display per row. Default: false.
// $spacing - # of ems to use as padding on each block item. Default: rem-calc(20).
// $base-style - Apply a base style to block grid. Default: true.
//
=block-grid($per-row: false, $spacing: $block-grid-default-spacing, $include-spacing: true, $base-style: true)
	@if $base-style
		display: block
		padding: 0
		@if $align-block-grid-to-grid
			margin: 0
		@else
			margin: 0 -$spacing / 2
		+clearfix
		& > li
			display: block
			height: auto
			float: $default-float
			@if $include-spacing
				padding: 0 $spacing / 2 $spacing
	@if $per-row
		& > li
			width: 100% / $per-row
			@if $include-spacing
				padding: 0 $spacing / 2 $spacing
			list-style: none
			&:nth-of-type(n)
				clear: none
			&:nth-of-type(#{$per-row}n+1)
				clear: both
			@if $align-block-grid-to-grid
				+block-grid-aligned($per-row, $spacing)

=block-grid-aligned($per-row, $spacing)
	@for $i from 1 through $block-grid-elements
		@if $per-row >= $i
			$grid-column: "+" + $i
			@if $per-row == $i
				$grid-column: ""
			&:nth-of-type(#{$per-row}n#{unquote($grid-column)})
				padding-left: $spacing - $spacing / $per-row * ($per-row - ($i - 1))
				padding-right: $spacing - $spacing / $per-row * $i

// Generate presentational markup for block grid.
//
// $size - Name of class to use, i.e. "large" will generate .large-block-grid-1, .large-block-grid-2, etc.
=block-grid-html-classes($size, $include-spacing)
	@for $i from 1 through $block-grid-elements
		.#{$size}-block-grid-#{$i}
			+block-grid($i, $block-grid-default-spacing, $include-spacing, false)

@if $include-html-grid-classes
	[class*="block-grid-"]
		+block-grid
		@extend %setBoxSizing
	@if $block-grid-media-queries
		@media #{$small-up}
			+block-grid-html-classes($size: small, $include_spacing: false)
		@media #{$medium-up}
			+block-grid-html-classes($size: medium, $include_spacing: false)
		@media #{$large-up}
			+block-grid-html-classes($size: large, $include_spacing: false)
		@if $include-xl-html-block-grid-classes
			@media #{$xlarge-up}
				+block-grid-html-classes($size: xlarge, $include_spacing: false)
			@media #{$xxlarge-up}
				+block-grid-html-classes($size: xxlarge, $include_spacing: false)
