// Code for small screens first, and larger devices will inherit those styles. Customize for larger screens as necessary.
// Small grids expand to large screens easier than large grids cram into small screens.
// Nest the grids indefinitely, though at a certain point it will get absurd.
//
// Move blocks up to 11 columns to the right by using classes like .large-offset-1 and .small-offset-3
// In order to work around browsers' different rounding behaviors, Foundation will float the last column in a row to the right so the edge aligns. If your row doesn't have a count that adds up to 12 columns, you can tag the last column with a class of *end* in order to override that behavior.
// Center your columns by adding a class of small-centered to your column. Large will inherit small centering by default, but you can also center solely on large by applying a large-centered class. To uncenter on large screens use large-uncentered.

// It strips the unit of measure and returns it
// @function strip-unit($num)
// 	@return $num / ($num * 0 + 1)

// // CONVERT TO REM
// @function convert-to-rem($value, $base-value: 10px)
// 	$value: strip-unit($value) / strip-unit($base-value) * 1rem
// 	@if $value == 0rem
// 		$value: 0
// 	// Turn 0rem into 0
// 	@return $value

@function rem-calc($values, $base-value: 10px)
	$max: length($values)
	@if $max == 1
		@return convert-to-rem(nth($values, 1), $base-value)
	$remValues: ()
	@for $i from 1 through $max
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value))
	@return $remValues

@function lower-bound($range)
	@if length($range) <= 0
		@return 0
	@return nth($range, 1)

@function upper-bound($range)
	@if length($range) < 2
		@return 999999999999
	@return nth($range, 2)

// @mixins
//
// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
=css-triangle($triangle-size, $triangle-color, $triangle-direction)
	content: ""
	display: block
	width: 0
	height: 0
	border: inset $triangle-size
	@if $triangle-direction == top
		border-color: $triangle-color transparent transparent transparent
		border-top-style: solid
	@if $triangle-direction == bottom
		border-color: transparent transparent $triangle-color transparent
		border-bottom-style: solid
	@if $triangle-direction == left
		border-color: transparent transparent transparent $triangle-color
		border-left-style: solid
	@if $triangle-direction == right
		border-color: transparent $triangle-color transparent transparent
		border-right-style: solid

// We use this to do clear floats
=clearfix
	*zoom: 1
	&:before, &:after
		content: " "
		display: table
	&:after
		clear: both

// We use these to control text direction settings
$default-float: left
$opposite-direction: right

// We use this to control whether or not CSS classes come through in the gem files.
$include-html-classes: true
$include-print-styles: true
$include-html-global-classes: $include-html-classes

// Media Query Ranges
//
// Small screens: max-width 640px, mobile-only styles
$small-range: 0em, 40em

// Medium screens: min-width 641px and max-width 1024px
$medium-range: 40.063em, 64em

// Large screens: min-width 1025px and max-width 1440px
$large-range: 64.063em, 90em

// XLarge screens: min-width 1441px and max-width 1920px
$xlarge-range: 90.063em, 120em

// XXLarge screens: min-width 1921px
$xxlarge-range: 120.063em, 99999999em

$screen: "only screen"

$landscape: "#{$screen} and (orientation: landscape)"
$portrait: "#{$screen} and (orientation: portrait)"

$small-up: $screen
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})"

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})"
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})"

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})"
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})"

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})"
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})"

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})"
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})"

//
// @variables
//
$row-width: rem-calc(1000)
$column-gutter: rem-calc(30)
$total-columns: 12

//
// Grid Functions
//

// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
@function grid-calc($colNumber, $totalColumns)
	@return percentage($colNumber / $totalColumns)

//
// @mixins
//

// For creating container, nested, and collapsed rows.
//
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
=grid-row($behavior: false)
	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest
		width: auto
		margin-#{$default-float}: -($column-gutter / 2)
		margin-#{$opposite-direction}: -($column-gutter / 2)
		margin-top: 0
		margin-bottom: 0
		max-width: none
	@else if $behavior == collapse
		width: 100%
		margin: 0
		max-width: $row-width
	@else if $behavior == nest-collapse
		width: auto
		margin: 0
		max-width: none
	@else
		width: 100%
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		margin-top: 0
		margin-bottom: 0
		max-width: $row-width
	// Clearfix for all rows
	+clearfix

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.

=grid-column($columns: false, $last-column: false, $center: false, $offset: false, $push: false, $pull: false, $collapse: false, $float: true, $position: false)
	// If positioned for default .column, include relative position
	// push and pull require position set
	@if $position or $push or $pull
		position: relative
	// If collapsed, get rid of gutter padding
	@if $collapse
		padding-left: 0
		padding-right: 0
	@else if $collapse == false
		padding-left: $column-gutter / 2
		padding-right: $column-gutter / 2
	// If a column number is given, calculate width
	@if $columns
		width: grid-calc($columns, $total-columns)
		// If last column, float naturally instead of to the right
		@if $last-column
			float: $opposite-direction
	// Source Ordering, adds left/right depending on which you use.
	@if $push
		#{$default-float}: grid-calc($push, $total-columns)
		#{$opposite-direction}: auto
	@if $pull
		#{$opposite-direction}: grid-calc($pull, $total-columns)
		#{$default-float}: auto
	@if $float
		@if $float == left or $float == true
			float: $default-float
		@else if $float == right
			float: $opposite-direction
		@else
			float: none
	// If centered, get rid of float and add appropriate margins
	@if $center
		margin-#{$default-float}: auto
		margin-#{$opposite-direction}: auto
		float: none
	// If offset, calculate appropriate margins
	@if $offset
		margin-#{$default-float}: grid-calc($offset, $total-columns) !important

// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
=grid-html-classes($size)
	@for $i from 0 through $total-columns - 1
		.#{$size}-push-#{$i}
			+grid-column($push: $i, $collapse: null, $float: false)
		.#{$size}-pull-#{$i}
			+grid-column($pull: $i, $collapse: null, $float: false)
	.column,
	.columns
		+grid-column($columns: false, $position: true)
	@for $i from 1 through $total-columns
		.#{$size}-#{$i}
			+grid-column($columns: $i, $collapse: null, $float: false)
	[class*="column"] + [class*="column"]:last-child
		float: $opposite-direction
	[class*="column"] + [class*="column"].end
		float: $default-float
	@for $i from 0 through $total-columns - 1
		.#{$size}-offset-#{$i}
			+grid-column($offset: $i, $collapse: null, $float: false)
	.#{$size}-reset-order,
	.#{$size}-reset-order
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		left: auto
		right: auto
		float: $default-float
	.column.#{$size}-centered,
	.columns.#{$size}-centered
		+grid-column($center: true, $collapse: null, $float: false)
	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered
		margin-#{$default-float}: 0
		margin-#{$opposite-direction}: 0
		float: $default-float !important
	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite
		float: $opposite-direction

.row
	+grid-row
	&.collapse
		> .column,
		> .columns
			+grid-column($collapse: true, $float: false)
		.row
			margin-left: 0
			margin-right: 0
	.row
		+grid-row($behavior: nest)
		&.collapse
			+grid-row($behavior: nest-collapse)

.column, .columns
	+grid-column($columns: $total-columns)

@media #{$small-up}
	+grid-html-classes($size: small)
@media #{$medium-up}
	+grid-html-classes($size: medium)
	// Old push and pull classes
	@for $i from 0 through $total-columns - 1
		.push-#{$i}
			+grid-column($push: $i, $collapse: null, $float: false)
		.pull-#{$i}
			+grid-column($pull: $i, $collapse: null, $float: false)
@media #{$large-up}
	+grid-html-classes($size: large)
	@for $i from 0 through $total-columns - 1
		.push-#{$i}
			+grid-column($push: $i, $collapse: null, $float: false)
		.pull-#{$i}
			+grid-column($pull: $i, $collapse: null, $float: false)

// @media #{$xlarge-up}
// 	+grid-html-classes($size: xlarge)
// @media #{$xxlarge-up}
// 	+grid-html-classes($size: xxlarge)
