//****************************************************************
//* Table of Content  [PLUGINS]
//*
//* @function calc-em($target-px, $context)
//* @function lmao($orig-color, $iterations, $sx, $sy, $sz)
//* @function risingStar( $color: rgba(red, 0.5), $end: 25 )
//* @function circleEffect()
//* @function squareEffect()
//* @function sassy-text-shadow($color, $iterations, $rad, $deg, $cos-i, $sin-i, $color-multiplier)
//*
//* @function modular-scale($multiple, $base-size, $ratio)  OR  @function ms
//* @function ms-multibase-multiratio($multiple, $base-size, $ratio)
//* @function ms-multibase($multiple, $base-size, $ratio)
//* @function ms-multiratio($multiple, $base-size, $ratio)
//* @function trim-sort($multiple, $scale-values, $base-size)
//* @mixin modular-scale($property, $multiple, $base-size, $ratio)
//* @mixin modular-scale-classes($multiple, $property, $class-slug, $base-size, $ratio)
//* @mixin ttransform($transform: $capitalize)
//*
//* @function exponent($base, $exponent)
//* @function sort-list($list, $dir: 'asc')
//* @function trim-list($list, $start, $dir: 'asc')
//*
//* @mixin progress-bar($status: $success, $stripe: false, $active: false)
//*
//****************************************************************


//Like percentage() except that it takes two arguments ($target-px and $container) and represents the result in ems.
//percentage(360px / 960px)  #37.5%
@function calc-em($target-px, $context)
	@return ($target-px / $context) * 1em


// http://sassymothereffingtextshadow.com/
// Sassy Lorenz Attractor: Compass Plugin for Text Shadow
// Usage: +text-shadow(lmao(#b80000, 5000, 6, 4, 6))
@function lmao($orig-color, $iterations, $sx, $sy, $sz)
	$output: ''
	$end: $iterations

	$x0: $sx / 10
	$y0: $sy
	$z0: $sz
	$h: 0.01
	$a: 10.0
	$b: 28.0
	$c: 8.0 / 3.0

	@for $i from 0 through $end
		$x1: $x0 + $h * $a * ($y0 - $x0)
		$y1: $y0 + $h * ($x0 * ($b - $z0) - $y0)
		$z1: $z0 + $h * ($x0 * $y0 - $c * $z0)

		$xval: $x1 * -50
		$yval: $y1 * -20
		$spread: $z1 * .1

		$color: rgba($orig-color, ($i / $end))
		$color: adjust-hue($color, $z1)

		$output: $output + '#$color #$xvalpx #$yvalpx #$spreadpx'
		@if $i < $end
			$output: $output + ', '
		$x0: $x1
		$y0: $y1
		$z0: $z1
	@return unquote($output)


// Rising Star: Compass Plugin for Text Shadow
// Usage: +text-shadow(risingStar())
@function risingStar( $color: rgba(red, 0.5), $end: 25 )
	$output: ''
	@for $i from 1 through $end
		$output: $output + '#$color #$ipx #$ipx 2px'
		@if $i < $end
			$output: $output + ', '
	@return unquote($output)


// circleEffect: Compass Plugin for Text Shadow
// Usage: +text-shadow(circleEffect())
@function circleEffect()
	$output: ''
	$end: 25
	$radius: 50
	@for $i from 1 through $end
		$color: rgba($red, ($i / $end))
		$position: 360 / $end * $i
		$cos: cos($position * (pi() / 180))
		$x-position: $radius * $cos
		$sin: sin($position * (pi() / 180))
		$y-position: $radius * $sin
		$output: $output + '#$color #$x-positionpx #$y-positionpx 2px'
		@if $i < $end
			$output: $output + ', '
	@return unquote($output)


// squareEffect: Compass Plugin for Text Shadow
// Usage: +text-shadow(circsquareEffectleEffect())
@function squareEffect()
	$output: ''
	$end: 100
	$radius: 40
	@for $i from 1 through $end
		$color: rgba(red, ($i / $end))
		$position: 360 / $end * $i
		$cos: cos($position * (pi() / 180))
		$x-position: $radius * $cos
		$sin: sin($position * (pi() / 15))
		$y-position: $radius * $sin
		$output: $output + '#$color #$x-positionpx #$y-positionpx 2px'
		@if $i < $end
			$output: $output + ', '
	@return unquote($output)


// sassy-text-shadow: Compass Plugin for Text Shadow
// Usage: +text-shadow(sassy-text-shadow($red, 100, 80, 120, 90, -45, 0.09))
@function sassy-text-shadow($color, $iterations, $rad, $deg, $cos-i, $sin-i, $color-multiplier)
	$output: ''
	$end: $iterations
	$radius: $rad
	@for $i from 1 through $end
		$color: rgba($color, ($i / $end))
		$color: adjust-hue($color, $i * $color-multiplier)
		$position: $deg / $end * $i
		$cos: cos($position * (pi() / $cos-i))
		$x-position: $radius * $cos
		$sin: sin($position * (pi() / $sin-i))
		$y-position: $radius * $sin
		$spread: $i / ($iterations / 10)
		$output: $output + '#$color #$x-positionpx #$y-positionpx px'
		@if $i < $end
			$output: $output + ', '
	@return unquote($output)



//**************************************************
//* MODULAR-SCALE
//**************************************************

// https://github.com/scottkellum/modular-scale
// http://www.alistapart.com/articles/more-meaningful-typography/ #good article for all it starts
// http://modularscale.com/ #online version of the calculation

// Ratios
$golden: 1.618
$double-octave: (4 / 1)
$major-twelfth: (3 / 1)
$major-eleventh: (8 / 3)
$major-tenth: (5 / 2)
$octave: (2 / 1)
$major-seventh: (15 / 8)
$minor-seventh: (16 / 9)
$major-sixth: (5 / 3)
$minor-sixth: (8 / 5)
$fifth: (3 / 2)
$augfourth: (1 / 1.4142135623730950488) // (1 / âˆš2)
$fourth: (4 / 3)
$major-third: (5 / 4)
$minor-third: (6 / 5)
$major-second: (9 / 8)
$minor-second: (16 / 15)

// Defaults
$ratio: $golden !default
$base-size: 14px !default
$property: font-size !default
$class-slug: ms !default

// Modular Scale function
// Usage: modular-scale(1, 14px, $golden)
// multiratio  #modular-scale(7, 14px, $golden $fourth)
// multibase-multiratio #width: ms(7, 14px 300px, $golden $fourth)
// If $base-size is definied, do not need the 2nd @param

// You can also set the $base-size variable to a list
// to interrelate two significant known sizes in your design
// note: the starting point of the scale will always be the *lowest* value in this list
// $base-size: 14px 300px
// $ratio: $golden $fourth

// Concept: if $multiple is 5
// @return  $ratio * $ratio * $ratio * $ratio * $ratio * $base-size
//
// Concept: if $multiple is -5
// @return  $base-size / $ratio / $ratio / $ratio / $ratio / $ratio

// Concept: ms(7, 14px 125px, $golden )
// @return: 77.256   # // 18.239px 22.652px 29.51px 36.651px 47.748px 59.301px [77.256px]

// Concept: ms(7, 14px, $golden $fourth)
// @return: 58.996   # // 18.667px 22.652px 24.889px 33.185px 36.651px 44.247px [58.996px]

@function modular-scale($multiple, $base-size, $ratio)
	// return the $base-size if $multiple is zero
	@if $multiple == 0
		@if type-of($base-size) == 'list'
			$base-size: sort-list($base-size)
			@return nth($base-size, 1)
		// return just the simple $base-size value if it's not a list
		@return $base-size

	// if multiple base-sizes and multiple ratios are passed in as a list
	// calculate values in using each base-size / ratio combination
	@if type-of($base-size) == 'list' and type-of($ratio) == 'list'
		@if unit(ms-multibase-multiratio($multiple, $base-size, $ratio)) == 'px'
			@return round(ms-multibase-multiratio($multiple, $base-size, $ratio))
		@return ms-multibase-multiratio($multiple, $base-size, $ratio)

	// if multiple base-sizes are passed in as a list
	// calculate values in using each base-size
	@if type-of($base-size) == 'list' and type-of($ratio) == 'number'
		@if unit(ms-multibase($multiple, $base-size, $ratio)) == 'px'
			@return round(ms-multibase($multiple, $base-size, $ratio))
		@return ms-multibase($multiple, $base-size, $ratio)

	// if multiple ratios are passed in as a list
	// calculate values in using each ratio
	@if type-of($base-size) == 'number' and type-of($ratio) == 'list'
		@if unit(ms-multiratio($multiple, $base-size, $ratio)) == 'px'
			@return round(ms-multiratio($multiple, $base-size, $ratio))
		@return ms-multiratio($multiple, $base-size, $ratio)

	// If there are no lists just run the simple function
	@if unit(exponent($ratio, $multiple) * $base-size) == 'px'
		@return round(exponent($ratio, $multiple) * $base-size)

	@return exponent($ratio, $multiple) * $base-size

// Shortcut
@function ms($multiple, $base-size, $ratio)
	@return modular-scale($multiple, $base-size, $ratio)

// calculate values in using each base-size / ratio combination
@function ms-multibase-multiratio($multiple, $base-size, $ratio)
	$scale-values: ()  // start with an empty list to place all values in
	$base-size: sort-list($base-size) // make sure base sizes are in ascending order
	$k: 1 // take each base-size in turn
	@while $k <= length($base-size)
		// add each $base-size to the list except the first
		@if $k > 1
			$scale-values: append($scale-values, nth($base-size, $k))
		// take each ratio in turn
		$j: 1
		@while $j <= length($ratio)
			// reset $modular-scale for each set
			$modular-scale: nth($base-size, $k)
			// do the scale for each base-size using this ratio
			@if $multiple > 0
				// up $multiple times
				// and add the result to $scale-values
				@for $i from 1 through $multiple
					$modular-scale: exponent(nth($ratio, $j), $i) * nth($base-size, $k)
					$scale-values: append($scale-values, $modular-scale)
				// and down until the value is lower than the lowest $base-size
				// and add the result to $scale-values
				$i: -1
				$modular-scale: nth($base-size, $k)
				@while $modular-scale >= nth($base-size, 1)
					$modular-scale: exponent(nth($ratio, $j), $i) * nth($base-size, $k)
					$scale-values: append($scale-values, $modular-scale)
					$i: $i - 1
			@if $multiple < 0
				// do the scale down for each set to below 1px
				$i: -1
				$modular-scale: nth($base-size, $k)
				@while $modular-scale > 1
					$modular-scale: exponent(nth($ratio, $j), $i) * nth($base-size, $k)
					$scale-values: append($scale-values, $modular-scale)
					$i: $i - 1
			$j: $j + 1
		$k: $k + 1
	// return trimmed and sorted final list
	@return trim-sort($multiple, $scale-values, $base-size)

// calculate values in using each base-size
@function ms-multibase($multiple, $base-size, $ratio)
	// start with an empty list to place all values in
	$scale-values: ()
	// make sure base sizes are in ascending order
	$base-size: sort-list($base-size)
	// take each base-size in turn
	$k: 1
	@while $k <= length($base-size)
		// add each $base-size to the list except the first
		@if $k > 1
			$scale-values: append($scale-values, nth($base-size, $k))
		// reset $modular-scale for each set
		$modular-scale: nth($base-size, $k)
		// do the scale for each base-size using this ratio
		@if $multiple > 0
			// up $multiple times
			// and add the result to $scale-values
			@for $i from 1 through $multiple
				$modular-scale: exponent($ratio, $i) * nth($base-size, $k)
				$scale-values: append($scale-values, $modular-scale)
			// and down until the value is lower than the lowest $base-size
			// and add the result to $scale-values
			$i: -1
			$modular-scale: nth($base-size, $k)
			@while $modular-scale >= nth($base-size, 1)
				$modular-scale: exponent($ratio, $i) * nth($base-size, $k)
				$scale-values: append($scale-values, $modular-scale)
				$i: $i - 1
		@if $multiple < 0
			// do the scale down for each set to below 1px
			$i: -1
			$modular-scale: nth($base-size, $k)
			@while $modular-scale > 1
				$modular-scale: exponent($ratio, $i) * nth($base-size, $k)
				$scale-values: append($scale-values, $modular-scale)
				$i: $i - 1
		$k: $k + 1
	// return trimmed and sorted final list
	@return trim-sort($multiple, $scale-values, $base-size)


// calculate values in using each ratio
@function ms-multiratio($multiple, $base-size, $ratio)
	// start with an empty list to place all values in
	$scale-values: ()
	// If $multiple is a positive integer (up the scale)
	@if $multiple > 0
		// take each ratio in turn
		$j: 1
		@while $j <= length($ratio)
			// reset $modular-scale for each set
			$modular-scale: $base-size
			// do the scale using this ratio thru the multiple, and add the result to $scale-values
			@for $i from 1 through $multiple
				$modular-scale: exponent(nth($ratio, $j), $i) * $base-size
				$scale-values: append($scale-values, $modular-scale)
			$j: $j + 1
		// sort acsending
		$scale-values: sort-list($scale-values)
		// return the final value using the laced list
		@return nth($scale-values, $multiple)
	// If $multiple is a negative integer (down the scale)
	@if $multiple < 0
		// take each ratio in turn
		$j: 1
		@while $j <= length($ratio)
			// reset $modular-scale for each set
			$modular-scale: $base-size
			// do the scale using this ratio thru the multiple, and add the result to $scale-values
			@for $i from 1 through ($multiple * -1)
				$modular-scale: exponent(nth($ratio, $j), -$i) * $base-size
				$scale-values: append($scale-values, $modular-scale)
			$j: $j + 1
		// sort decending
		$scale-values: sort-list($scale-values, 'dec')
		// return the final value using the laced list
		@return nth($scale-values, $multiple * -1)


// trim and sort the final list
@function trim-sort($multiple, $scale-values, $base-size)
	@if $multiple > 0
		// trim list so we can count from the lowest $base-size
		$scale-values: trim-list($scale-values, nth($base-size, 1))
		// sort acsending
		$scale-values: sort-list($scale-values)
		// return the final value using the laced list
		@return nth($scale-values, $multiple)
	@else
		// trim list so we can count from the lowest $base-size
		$scale-values: trim-list($scale-values, nth($base-size, 1), 'dec')
		// sort acsending
		$scale-values: sort-list($scale-values, 'dec')
		// return the final value using the laced list
		@return nth($scale-values, -$multiple)


// Mixin
// Deprecated. Use the modular-scale() function instead
@mixin modular-scale($property, $multiple, $base-size, $ratio)
	// Print the $property and return the value from the Modular Scale function
	@warn "The modular-scale mixin is deprecated. Instead use the function: width: modular-scale(3)"
	#{$property}: modular-scale($multiple, $base-size, $ratio)


// Classes Mixin
// Usage: +modular-scale-classes(6, line-height)
@mixin modular-scale-classes($multiple, $property, $class-slug, $base-size, $ratio)
	// Loop from 0 through the value of $multiple and generate a range of classes
	@for $i from 0 through $multiple
		.#{$class-slug}-#{$i}
			// Print the $property and return the value from the Modular Scale function
			#{$property}: modular-scale($i, $base-size, $ratio)


// Utilities functions below

// Sass exponent support
@function exponent($base, $exponent)
	// reset value
	$value: $base
	// positive intergers get multiplied
	@if $exponent > 1
		@for $i from 2 through $exponent
			$value: $value * $base
	// negitive intergers get divided. A number divided by itself is 1
	@if $exponent < 1
		@for $i from 0 through -$exponent
			$value: $value / $base
	// return the last value written
	@return $value


// Sass list sorting support
@function sort-list($list, $dir: 'asc')
	// built-in list sorting in Sass would make this go away.
	// declare some empty lists to put our new order and temporary values
	$new-order: ()
	$temp: ()
	// fill $temp with the contents of $list
	$temp: join($temp, $list)
	// if sorting ascending
	@if $dir == 'asc'
	// loop through all values in $list
	@for $i from 1 through length($list)
		// impossibly high starter value to compare
		$low: 1000000
		// check for lowest value in $temp
		@for $j from 1 through length($temp)
			@if nth($temp, $j) < $low
				$low: nth($temp, $j)
		// add lowest value to $new-order
		$new-order: append($new-order, $low)
		// empty $temp for the next comparison
		$temp: ()
		// re-populate $temp with remaining values to sort
		@for $k from 1 through length($list)
			@if nth($list, $k) > $low
				$temp: append($temp, nth($list, $k))
	@if $dir == 'dec'
		// loop through all values in $list
		@for $i from 1 through length($list)
			// 0 starter value
			$high: 0
			// check for highest value in $temp
			@for $j from 1 through length($temp)
				@if nth($temp, $j) > $high
					$high: nth($temp, $j)
			$new-order: append($new-order, $high)
			// empty $temp for the next comparison
			$temp: ()
			// re-populate $temp with remaining values to sort
			@for $k from 1 through length($list)
				@if nth($list, $k) < $high
					$temp: append($temp, nth($list, $k))
	@return $new-order


// Sass list trimming support
@function trim-list($list, $start, $dir: 'asc')
	// built-in list trimming in Sass would make this go away.
	// declare some empty lists to put our trimmed values
	$trimmed: ()
	// if sorting ascending
	@if $dir == 'asc'
		// loop through all values in $list
		@for $i from 1 through length($list)
			@if nth($list, $i) >= $start
				$trimmed: append($trimmed, nth($list, $i))
	@if $dir == 'dec'
		// loop through all values in $list
		@for $i from 1 through length($list)
			@if nth($list, $i) <= $start
				$trimmed: append($trimmed, nth($list, $i))
	@return $trimmed


//**************************************************
//* PROGRESS BARS
//**************************************************

//+progress-bar($status, $stripe, $active)
//@param: $status: error, success, info, warning
//@param: $stripe: 45 angle;  $active: enable animation
// Usage: <div> <p style="width: 60%;"></p> </div> // Animation the percentage if neccessary
@mixin progress-bar($status: $success, $stripe: false, $active: false)
	overflow: hidden
	height: 18px
	margin-bottom: 18px
	+background-image(linear-gradient(top, #f5f5f5, #f9f9f9 ))
	+box-shadow( rgba(0,0,0,.1) 0 1px 2px 0 inset )
	+border-radius($default-border-radius)

	&>*
		// Bar of progress
		width: 0%
		height: 18px
		color: $white
		text-align: center
		+text-shadow( rgba(0,0,0,.25) 0 -1px 0 )
		+background-image(linear-gradient(top, $progress-background-start-color, $progress-background-end-color ))
		+box-shadow(rgba(0,0,0,.15) 0 -1px 0 0 inset)
		+box-sizing(border-box)
		+transition(width .6s ease())

		@if $stripe == true
			+gstripe($progress-background-start-color)
			+background-size(40px 40px)

		@if $active == true
			-webkit-animation: progress-bar-stripes 2s linear infinite
			-moz-animation: progress-bar-stripes 2s linear infinite
			animation: progress-bar-stripes 2s linear infinite

		@if $status == $error
			+background-image(linear-gradient(top, $error-progress-start-color, $error-progress-end-color))
			@if $stripe == true
				+gstripe($error-progress-start-color)

		@if $status == $success
			+background-image(linear-gradient(top, $success-progress-start-color, $success-progress-end-color))
			@if $stripe == true
				+gstripe($success-progress-start-color)

		@if $status == $info
			+background-image(linear-gradient(top, $info-progress-start-color, $info-progress-end-color))
			@if $stripe == true
				+gstripe($info-progress-start-color)

		@if $status == $warning
			+background-image(linear-gradient(top, lighten($warning-progress-start-color, 15%), $warning-progress-start-color))
			@if $stripe == true
				+gstripe(lighten($warning-progress-start-color, 15%))

	// ANIMATIONS
	@-webkit-keyframes progress-bar-stripes
		from
			background-position: 0 0
		to
			background-position: 40px 0
	@-moz-keyframes progress-bar-stripes
		from
			background-position: 0 0
		to
			background-position: 40px 0
	@-ms-keyframes progress-bar-stripes
		from
			background-position: 0 0
		to
			background-position: 40px 0
	@keyframes progress-bar-stripes
		from
			background-position: 0 0
		to
			background-position: 40px 0
