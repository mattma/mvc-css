//****************************************************************
//* Table of Content   [LAYOUT]
//*
//* Setting: _default_settings || _default_settings_min
//* @mixin width($width: auto, $marginZeroAuto: false, $defaultUnit: px)   or  @mixin w
//* @mixin height($height: auto, $defaultUnit: px)   						    or  @mixin h
//* @mixin mwidth($width, $direction: max, $defaultUnit: px)			    or  @mixin mw
//* @mixin mheight($height: auto, $direction: max, $defaultUnit: px)  	    or  @mixin mh
//* @mixin box($width: auto, $height: auto, $marginZeroAuto: false)
//* @mixin margin($direction, $margin-value: $DEFAULT-MARGIN-VALUE, $defaultUnit: px)
//* @mixin margins($top, $right: $top, $bottom: $top, $left: $right, $defaultUnit: px)
//* @mixin padding($direction, $padding-value: $DEFAULT-PADDING-VALUE, $defaultUnit: px)
//* @mixin paddings($top, $right: $top, $bottom: $top, $left: $right, $defaultUnit: px)
//* @mixin border( $position, $border-color: $general-border-color, $border-width: $DEFAULT-BORDER-WIDTH, $border-style: $DEFAULT-BORDER-STYLE, $defaultUnit: px )
//* @mixin borders( $border-color: $general-border-color, $border-width: $DEFAULT-BORDER-WIDTH, $border-style: $DEFAULT-BORDER-STYLE, $defaultUnit: px )
//* @mixin bstyle($position, $border-style: null)
//* @mixin bdcolor($position, $border-color: null)
//* @mixin bwidth($position, $border-width: null, $defaultUnit: px)
//* @mixin overflow($property, $overflow-side: null)
//* @mixin float($property)
//* @mixin floated($direction: left, $gap: 5px, $switch: both, $alphaOrOmega: both, $defaultUnit: px)
//* @mixin clear($property)
//* @mixin display($property)
//* @mixin visibility($property)
//* @mixin position($position, $_top: $DEFAULT-POSITION-TOP-VALUE, $_left: $DEFAULT-POSITION-LEFT-VALUE, $switch: $default, $defaultUnit: px)
//* @mixin zindex($z-index)
//* @mixin top($position-top-value, $defaultUnit: px)
//* @mixin right($position-right-value, $defaultUnit: px)
//* @mixin bottom($position-bottom-value, $defaultUnit: px)
//* @mixin left($position-left-value, $defaultUnit: px)
//* @mixin offset($_top: $DEFAULT-POSITION-TOP-VALUE, $_left: $DEFAULT-POSITION-LEFT-VALUE, $switch: $default, $defaultUnit: px)
//*
//****************************************************************

// @param $width, Default: auto. Take measurement of em, px, % or plain number.
// @param $marginZeroAuto  Turn feature on: margin: 0 auto
@mixin width($width: auto, $marginZeroAuto: $false, $defaultUnit: px)
	@if type-of($marginZeroAuto) == bool
		@if $marginZeroAuto == $true
			margin: 0 auto
	@if $width == auto
		width: auto
	@else
		+measurement(width, $width, $defaultUnit)


// Alias to the @mixin width()
@mixin w($width: auto, $marginZeroAuto: $false, $defaultUnit: px)
	@include width($width, $marginZeroAuto, $defaultUnit)


// @param $width, Default: null. Take measurement of em, px, % or plain number.
// @param $direction, Default: max.   take either "max" or "min"  for max-width or min-width
@mixin mwidth($width, $direction: max, $defaultUnit: px)
	+measurement( #{$direction}-width, $width, $defaultUnit )


// Alias to the @mixin mwidth() to generate  "max-width"
@mixin mw($width, $direction: max, $defaultUnit: px)
	@include mwidth( $width, $direction, $defaultUnit )


// @param $height, Default: auto. Take measurement of em, px, % or plain number.
@mixin height($height: auto, $defaultUnit: px)
	@if $height == auto
		height: auto
	@else
		+measurement(height, $height, $defaultUnit)


// Alias to the @mixin height()
@mixin h($height: auto, $defaultUnit: px)
	@include height($height, $defaultUnit)


// @param $height, Default: null. Take measurement of em, px, % or plain number.
// @param $direction, Default: max.   take either "max" or "min"  for max-width or min-width
@mixin mheight($height: auto, $direction: max, $defaultUnit: px)
	+measurement(#{$direction}-height, $height, $defaultUnit)


// Alias to the @mixin mheight() to generate  "max-height"
@mixin mh($height: auto, $direction: max, $defaultUnit: px)
	@include mheight($height, $direction, $defaultUnit)


// @param Same like $width & $height
@mixin box($width: auto, $height: auto, $marginZeroAuto: $false)
	+height($height)
	+width($width, $marginZeroAuto)


// Single Margin Setup
// Default: px value or auto. Take measurement of em, px, % or plain number.
@mixin margin($direction, $margin-value: $DEFAULT-MARGIN-VALUE, $defaultUnit: px)
	@if type-of($margin-value) == number
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			+measurement(margin-top, $margin-value, $defaultUnit)
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			+measurement(margin-right, $margin-value, $defaultUnit)
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			+measurement(margin-bottom, $margin-value, $defaultUnit)
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			+measurement(margin-left, $margin-value, $defaultUnit)
	@else
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			margin-top: auto
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			margin-right: auto
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			margin-bottom: auto
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			margin-left: auto


// Box Margins. Work just like regular margin value to set 4 side of the box
// Default: px value or auto. Take measurement of em, px, % or plain number.
// +margins  without any arguments, will output margin: 0
@mixin margins($top: $default, $right: $top, $bottom: $top, $left: $right, $defaultUnit: px)
	@if $top != $default
		@if $left != false
			@if $right != false
				@if type-of($top) != number
					margin: auto
				@else
					@if type-of($right) == number
						margin: measurement($top, $defaultUnit) measurement($right, $defaultUnit) measurement($bottom, $defaultUnit) measurement($left, $defaultUnit)
					@else
						margin: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
			@else
				@if type-of($right) == number
					margin: measurement($top, $defaultUnit) measurement($top, $defaultUnit) measurement($top, $defaultUnit) measurement($top, $defaultUnit)
				@else
					margin: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
		@else
			@if type-of($right) == number
				margin: measurement($top, $defaultUnit) measurement($right, $defaultUnit) measurement($bottom, $defaultUnit) measurement($right, $defaultUnit)
			@else
				margin: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
	@else
		margin: 0


// Single Padding Setup
// Default: px value or auto. Take measurement of em, px, % or plain number.
@mixin padding($direction, $padding-value: $DEFAULT-PADDING-VALUE, $defaultUnit: px)
	@if type-of($padding-value) == number
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			+measurement(padding-top, $padding-value, $defaultUnit)
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			+measurement(padding-right, $padding-value, $defaultUnit)
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			+measurement(padding-bottom, $padding-value, $defaultUnit)
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			+measurement(padding-left, $padding-value, $defaultUnit)
	@else
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			padding-top: auto
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			padding-right: auto
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			padding-bottom: auto
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			padding-left: auto


// Box Paddings. Work just like regular padding value to set 4 side of the box
// Default: px value or auto. Take measurement of em, px, % or plain number.
// +paddings  without any arguments, will output padding: 0
@mixin paddings($top: $default, $right: $top, $bottom: $top, $left: $right, $defaultUnit: px)
	@if $top != $default
		@if $left != false
			@if $right != false
				@if type-of($top) != number
					padding: auto
				@else
					@if type-of($right) == number
						padding: measurement($top, $defaultUnit) measurement($right, $defaultUnit) measurement($bottom, $defaultUnit) measurement($left, $defaultUnit)
					@else
						padding: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
			@else
				@if type-of($right) == number
					padding: measurement($top, $defaultUnit) measurement($top, $defaultUnit) measurement($top, $defaultUnit) measurement($top, $defaultUnit)
				@else
					padding: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
		@else
			@if type-of($right) == number
				padding: measurement($top, $defaultUnit) measurement($right, $defaultUnit) measurement($bottom, $defaultUnit) measurement($right, $defaultUnit)
			@else
				padding: measurement($top, $defaultUnit) auto measurement($bottom, $defaultUnit)
	@else
		padding: 0


// Single Border setup
// Default: px value. Take measurement of em, px, % or plain number.
// @param: $border-color could be color value or "none"
// Usage: +border(top, none)
@mixin border( $direction, $border-color: $general-border-color, $border-width: $DEFAULT-BORDER-WIDTH, $border-style: $DEFAULT-BORDER-STYLE, $defaultUnit: px )

	@if $border-color != $none
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			border-top: measurement($border-width, $defaultUnit) $border-style color-format-helper($border-color)
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			border-right: measurement($border-width, $defaultUnit) $border-style color-format-helper($border-color)
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			border-bottom: measurement($border-width, $defaultUnit) $border-style color-format-helper($border-color)
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			border-left: measurement($border-width, $defaultUnit) $border-style color-format-helper($border-color)
	@else
		@if $direction == nth($top, 1) or $direction == nth($top, 2)
			border-top: 0 none
		@else if $direction == nth($right, 1) or $direction == nth($right, 2)
			border-right: 0 none
		@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
			border-bottom: 0 none
		@else if $direction == nth($left, 1) or $direction == nth($left, 2)
			border-left: 0 none


// Multiple border setup
// Default: px value. Take measurement of em, px, % or plain number.
// @param: $border-color could be color value or "none"
// Usage: +borders(none)
@mixin borders( $border-color: $general-border-color, $border-width: $DEFAULT-BORDER-WIDTH, $border-style: $DEFAULT-BORDER-STYLE, $defaultUnit: px )
	@if $border-color != $none
		//border: measurement($border-width, $defaultUnit) $border-style color-format-helper($border-color)
		+bstyle($border-style)
		+bdcolor($border-color)
		+bwidth($border-width)
	@else
		border: 0 none


// @param $direction:  top, bottom, right, left,  or  Ignore the value
// @param $border-style:  dotted solid double dashed
// Usage 1:  +bstyle(top, dotted)
// Usage 2:  +bstyle(solid)
@mixin bstyle($direction, $border-style: null)
	@if $direction == nth($top, 1) or $direction == nth($top, 2)
		+prop(border-top-style, $border-style, $BORDER-STYLE-VALUE-LIST)
	@else if $direction == nth($right, 1) or $direction == nth($right, 2)
		+prop(border-right-style, $border-style, $BORDER-STYLE-VALUE-LIST)
	@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
		+prop(border-bottom-style, $border-style, $BORDER-STYLE-VALUE-LIST)
	@else if $direction == nth($left, 1) or $direction == nth($left, 2)
		+prop(border-left-style, $border-style, $BORDER-STYLE-VALUE-LIST)
	@else
		+prop(border-style, $direction, $BORDER-STYLE-VALUE-LIST)


// @param $direction:  top, bottom, right, left,  or  Ignore the value
// @param $border-color:  any color value
// Usage 1:  +bdcolor(b, 21 23 21)
// Usage 2:  +bdcolor(red)
@mixin bdcolor($direction, $border-color: null)
	@if $direction == nth($top, 1) or $direction == nth($top, 2)
		border-top-color: color-format-helper($border-color)
	@else if $direction == nth($right, 1) or $direction == nth($right, 2)
		border-right-color: color-format-helper($border-color)
	@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
		border-bottom-color: color-format-helper($border-color)
	@else if $direction == nth($left, 1) or $direction == nth($left, 2)
		border-left-color: color-format-helper($border-color)
	@else
		border-color: color-format-helper($direction)


// @param $direction:  top, bottom, right, left,  or  Ignore the value
// @param $border-width:  px, em, % value
// Usage 1:  +bwidth(left, 3em)
// Usage 2:  +bwidth(40%)
@mixin bwidth($direction, $border-width: null, $defaultUnit: px)
	@if $direction == nth($top, 1) or $direction == nth($top, 2)
		+measurement(border-top-width, $border-width, $defaultUnit)
	@else if $direction == nth($right, 1) or $direction == nth($right, 2)
		+measurement(border-right-width, $border-width, $defaultUnit)
	@else if $direction == nth($bottom, 1) or $direction == nth($bottom, 2)
		+measurement(border-bottom-width, $border-width, $defaultUnit)
	@else if $direction == nth($left, 1) or $direction == nth($left, 2)
		+measurement(border-left-width, $border-width, $defaultUnit)
	@else
		+measurement(border-width, $direction, $defaultUnit)


// Overflow Property
// @param $property: visible hidden scroll auto
// @param $overflow-side: null, x, y  for generating e.g. overflow-x
@mixin overflow($property, $overflow-side: $default)
	@if $overflow-side == $default
		+prop(overflow, $property, $OVERFLOW-VALUE-LIST)
	@else
		@if $overflow-side == x
			+prop(overflow-x, $property, $OVERFLOW-VALUE-LIST)
		@else if $overflow-side == y
			+prop(overflow-y, $property, $OVERFLOW-VALUE-LIST)


// Float Property
// @param $property: left right none
@mixin float($property)
	+prop(float, $property, $FLOAT-VALUE-LIST)


// @param $direction: left or l,  right or r
// @param $gap: any value, px, em, % or plain number for spacing
// @param $switch: default. set top & left value
//					right or r,   set margin-right value
//					left or l,   set margin-left value
//					default,  set both margin-left and margin-right value
// @param $alphaOrOmega: only apply when value other than default
// 					right or r: Last-Child(omega), set margin-right value to 0
//					left or l: First-Child(alpha), s  set margin-left value to 0
//					both or anything else,  set both first-child margin-left and last-child margin-right value to 0
// Usage: +floated(r,10) or +floated(r,10em, default, both)
@mixin floated($direction: left, $gap: 5px, $switch: $default, $alphaOrOmega: $default, $defaultUnit: px)
	@include float($direction)
	@if $switch == $default
		margin-left: measurement($gap, $defaultUnit)
		margin-right: measurement($gap, $defaultUnit)
	@else if $switch == nth($left, 1) or $switch == nth($left, 2)
		margin-left: measurement($gap, $defaultUnit)
	@else if $switch == nth($right, 1) or $switch == nth($right, 2)
		margin-right: measurement($gap, $defaultUnit)

	@if $alphaOrOmega != $default
		@if $alphaOrOmega == nth($left, 1) or $alphaOrOmega == nth($left, 2)
			&:first-child
				margin-left: 0
		@else if $alphaOrOmega == nth($right, 1) or $alphaOrOmega == nth($right, 2)
			&:last-child
				margin-right: 0
		@else
			&:first-child
				margin-left: 0
			&:last-child
				margin-right: 0

// Clear Property
// @param $property: left right both none
@mixin clear($property)
	+prop(clear, $property, $CLEAR-VALUE-LIST)


// Display Property
// @param $property: block none inline inline-block
@mixin display($property)
	+prop(display, $property, $DISPLAY-VALUE-LIST)


// Visibility Property
// @param $property: visible hidden collapse(only for table elements)
@mixin visibility($property)
	+prop(visibility, $property, $VISIBILITY-VALUE-LIST)


// Position
// Default: px value. Take measurement of em, px, % or plain number.
// @param  $switch: default. set top & left value
//					right or r,   set top & right value
//					bottom or b,  set bottom & left value
//					both or anything other than r or b,  set bottom & right value
@mixin position($position, $_top: $DEFAULT-POSITION-TOP-VALUE, $_left: $DEFAULT-POSITION-LEFT-VALUE, $switch: $default, $defaultUnit: px)
	@if $position == nth($absolute, 1) or $position == nth($absolute, 2)
		position: absolute
		@if $switch == $default
			top: measurement($_top, $defaultUnit)
			left: measurement($_left, $defaultUnit)
		@else
			@if $switch == nth($bottom, 1) or $switch == nth($bottom, 2)
				bottom: measurement($_top, $defaultUnit)
				left: measurement($_left, $defaultUnit)
			@else if $switch == nth($right, 1) or $switch == nth($right, 2)
				top: measurement($_top, $defaultUnit)
				right: measurement($_left, $defaultUnit)
			@else
				bottom: measurement($_top, $defaultUnit)
				right: measurement($_left, $defaultUnit)
	@else if $position == nth($relative, 1) or $position == nth($relative, 2)
		position: relative
		@if $_top != 0
			@if $switch == default
				top: measurement($_top, $defaultUnit)
				left: measurement($_left, $defaultUnit)
			@else if $switch != default
				@if $switch == nth($bottom, 1) or $switch == nth($bottom, 2)
					bottom: measurement($_top, $defaultUnit)
					left: measurement($_left, $defaultUnit)
				@else if $switch == nth($right, 1) or $switch == nth($right, 2)
					top: measurement($_top, $defaultUnit)
					right: measurement($_left, $defaultUnit)
				@else
					bottom: measurement($_top, $defaultUnit)
					right: measurement($_left, $defaultUnit)
	@else if $position == nth($fixed, 1) or $position == nth($fixed, 2)
		position: fixed
		@if $_top != 0
			@if $switch == default
				top: measurement($_top, $defaultUnit)
				left: measurement($_left, $defaultUnit)
			@else if $switch != default
				@if $switch == nth($bottom, 1) or $switch == nth($bottom, 2)
					bottom: measurement($_top, $defaultUnit)
					left: measurement($_left, $defaultUnit)
				@else if $switch == nth($right, 1) or $switch == nth($right, 2)
					top: measurement($_top, $defaultUnit)
					right: measurement($_left, $defaultUnit)
				@else
					bottom: measurement($_top, $defaultUnit)
					right: measurement($_left, $defaultUnit)
	@else if $position == nth($static, 1) or $position == nth($static, 2)
		position: static


//@param $z-index,  take a number   default: null
@mixin zindex($z-index)
	z-index: $z-index


// @param $position-top-value. Take measurement of em, px, % or plain number.
@mixin top($position-top-value, $defaultUnit: px)
	+measurement(top, $position-top-value, $defaultUnit)


// @param $position-right-value. Take measurement of em, px, % or plain number.
@mixin right($position-right-value, $defaultUnit: px)
	+measurement(right, $position-right-value, $defaultUnit)


// @param $position-bottom-value. Take measurement of em, px, % or plain number.
@mixin bottom($position-bottom-value, $defaultUnit: px)
	+measurement(bottom, $position-bottom-value, $defaultUnit)


// @param $position-left-value. Take measurement of em, px, % or plain number.
@mixin left($position-left-value, $defaultUnit: px)
	+measurement(left, $position-left-value, $defaultUnit)


// Override the position value using top, bottom, right, left
// @param $_top. Take measurement of em, px, % or plain number.
// @param $_left. Take measurement of em, px, % or plain number.
// @param  $switch: default. set top & left value
//					right or r,   set top & right value
//					bottom or b,  set bottom & left value
//					both or anything other than r or b,  set bottom & right value
@mixin offset($_top: $DEFAULT-POSITION-TOP-VALUE, $_left: $DEFAULT-POSITION-LEFT-VALUE, $switch: $default, $defaultUnit: px)
	@if $switch == $default
		top: measurement($_top, $defaultUnit)
		left: measurement($_left, $defaultUnit)
	@else
		@if $switch == nth($bottom, 1) or $switch == nth($bottom, 2)
			bottom: measurement($_top, $defaultUnit)
			left: measurement($_left, $defaultUnit)
		@else if $switch == nth($right, 1) or $switch == nth($right, 2)
			top: measurement($_top, $defaultUnit)
			right: measurement($_left, $defaultUnit)
		@else
			bottom: measurement($_top, $defaultUnit)
			right: measurement($_left, $defaultUnit)
